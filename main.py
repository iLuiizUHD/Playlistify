import os
import json
import random
import spotipy
from os import getenv
from dotenv import load_dotenv, find_dotenv
from spotipy import Spotify
from spotipy.oauth2 import SpotifyOAuth

# Dotenv stuff
load_dotenv(find_dotenv())

scopes = [
  'playlist-modify-public',   
  'user-read-currently-playing',
  'user-modify-playback-state',
  'playlist-read-private',
  'playlist-modify-private',
  'user-library-read',
  'user-read-playback-state'
]

def generate_scope_string():
  return ' '.join(scopes)

class Playlistify:
  def __init__(self, nome: str, amount: int, genres: list, danceablity: float):
    # User defined variables
    self.nome = nome
    self.amount = amount
    self.genres = genres
    self.danceability = danceablity
    self.market = 'BR'

    # Username
    self.username = "g2wxqw13twqq0mpu79pxu0z10"

    # Spotify Stuff
    self.scope = generate_scope_string()
    self.spotify = Spotify(
      auth_manager=SpotifyOAuth(
        scope=self.scope,
        username=self.username
      )
    )
  
  def get_genres(self) -> list:
    genres = self.spotify.recommendation_genre_seeds()

    print(json.dumps(genres))
  
  def get_album_genre(self, uri: str):
    _id = ""
    
    try:
      _id = uri.split(':')[2]
    
    except Exception:
      print('Invalid URI!')
      return
    
    if _id == '':
      print('Cannot have an empty ID!')
      return

    album = self.spotify.album(_id)

    print(json.dumps(album))

  def get_recommendations(self) -> dict:
    # Filters
    danceablity = self.danceability
    genres = self.genres
    limit = self.amount
    market = self.market
    valence = 0.9
    popularity = 35
    loudness = -15.8
    energy = 0.8
    # tempo = 80.8

    max_popularity=100
    min_popularity=10

    min_tempo = 75.5
    max_tempo = 118.9

    recommendations = self.spotify.recommendations(
      seed_genres=genres,
      limit=limit,
      target_danceability=danceablity,
      target_valence=valence,
      target_popularity=popularity,
      target_loudness=loudness,
      target_energy=energy,
      max_popularity=max_popularity,
      min_popularity=min_popularity,
      min_tempo=min_tempo,
      max_tempo=max_tempo
    )

    return recommendations

  def build_playlist(self) -> bool:
    playlist = self.spotify.user_playlist_create(self.username, self.nome, public=False, description="Generated by Playlistify")

    user_id = playlist["owner"]["id"]
    playlist_id = playlist["id"]

    recommendations = self.get_recommendations()

    tracks = recommendations["tracks"]

    tracks_ids = [track['uri'] for track in tracks]

    add_tracks = self.spotify.user_playlist_add_tracks(user_id, playlist_id, tracks_ids)

    print(json.dumps(add_tracks))

if __name__ == "__main__":
  name = str(input("Playlist name: "))
  amount = int(input("Amount of songs: "))

  genres = [
    'anime',
    'electro',
    'house',
    'reggaeton',
    'pop'
  ]

  pl = Playlistify(name, amount, genres, 1)

  pl.build_playlist()
